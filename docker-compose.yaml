version: "3"

services:
  postgres:
    image: postgres:14
    restart: always
    container_name: postgres
    volumes:
      - ./postgres_storage:/var/lib/postgresql/data
      - ./postgres/db_init.sh:/docker-entrypoint-initdb.d/db_init.sh
    environment:
      - MLFLOW_DB=${MLFLOW_DB}
      - DAGSTER_DB=${DAGSTER_DB}
      - POSTGRES_USER=${PG_USER}
      - POSTGRES_PASSWORD=${PG_PASSWORD}
    expose:
      - ${PG_PORT}
    command: -p ${PG_PORT}
    networks:
      - deml

  s3:
    image: minio/minio
    restart: always
    container_name: s3
    ports:
      - "${MLFLOW_AWS_port}:${MLFLOW_AWS_port}"
    volumes:
      - ./s3_storege:/data
    environment:
      MINIO_ROOT_USER: ${AWS_ACCESS_KEY_ID}
      MINIO_ROOT_PASSWORD: ${AWS_SECRET_ACCESS_KEY}
    command: server --address ":9099" --console-address ":9001" /data/
    networks:
      - deml

  mlflow:
    image: mlflow_server
    restart: always
    build:
      context: .
      network: host
      dockerfile: ./mlflow/Dockerfile
    container_name: mlflow
    environment:
      - BACKEND=postgresql://${PG_USER}:${PG_PASSWORD}@postgres:${PG_PORT}/${MLFLOW_DB}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - ARTIFACTS=s3://${AWS_BUCKET_NAME}
      - MLFLOW_AWS_ENDPOINT_URL=http://s3:9099
      - MLFLOW_TRACKING_USERNAME=${MLFLOW_TRACKING_USERNAME}
      - MLFLOW_TRACKING_PASSWORD=${MLFLOW_TRACKING_PASSWORD}
    command:
      - sh
      - -c
      - mlflow server
        --host 0.0.0.0
        --port ${MLFLOW_PORT}
        --serve-artifacts
        --backend-store-uri $${BACKEND}
        --artifacts-destination $${ARTIFACTS}
    depends_on:
      - postgres
      - s3
    networks:
      - deml

  dagit:
    build:
      context: .
      network: host
      dockerfile: ./dagster/Dockerfile
    entrypoint:
      - dagit
      - -h
      - "0.0.0.0"
      - -p
      - ${DAGSTER_PORT}
      - -w
      - workspace.yaml
    container_name: dagit
    environment:
        PG_USER: ${PG_USER}
        PG_PASSWORD: ${PG_PASSWORD}
        PG_PORT: ${PG_PORT}
        DAGSTER_DB: ${DAGSTER_DB}
    volumes:
      - ./dagster/workspace.yaml:/opt/dagster/dagster_home/workspace.yaml
      - ./dagster/dagster.yaml:/opt/dagster/dagster_home/dagster.yaml
      - /var/run/docker.sock:/var/run/docker.sock
      - projects:/opt/dagster/dagster_home/projects
    expose:
      - "${DAGSTER_PORT}"
    networks:
      - deml
    depends_on:
      - postgres

  dagster_daemons:
    build:
      context: .
      network: host
      dockerfile: ./dagster/Dockerfile
    entrypoint:
      - dagster-daemon
      - run
    container_name: dagster_daemons
    environment:
        PG_USER: ${PG_USER}
        PG_PASSWORD: ${PG_PASSWORD}
        PG_PORT: ${PG_PORT}
        DAGSTER_DB: ${DAGSTER_DB}
    volumes:
      - ./dagster/workspace.yaml:/opt/dagster/dagster_home/workspace.yaml
      - ./dagster/dagster.yaml:/opt/dagster/dagster_home/dagster.yaml
      - /var/run/docker.sock:/var/run/docker.sock
      - projects:/opt/dagster/dagster_home/projects
    restart: on-failure
    networks:
      - deml
    depends_on:
      - postgres

  nginx:
    build:
      context: .
      network: host
      dockerfile: ./nginx/Dockerfile
    entrypoint:
      - "/run.sh"
    container_name: nginx
    user: oo
    ports:
      - "${DAGSTER_PORT}:${DAGSTER_PORT}"
      - "${MLFLOW_PORT}:${MLFLOW_PORT}"
      - "80:80"
      - "443:433"
    environment:
      - BASIC_USERNAME=${BASIC_USERNAME}
      - BASIC_PASSWORD=${BASIC_PASSWORD}
      - MLFLOW_ENPOINT_URL=${MLFLOW_ENPOINT_URL}
      - DAGSTER_ENPOINT_URL=${DAGSTER_ENPOINT_URL}
    volumes:
      - ./nginx/nginx.conf:/nginx.conf
      - ./nginx/run.sh:/run.sh
      - web-root:/var/www/html
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
    networks:
      - deml
    depends_on:
      - mlflow
      - dagit
      - dagster_daemons

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - ./nginx/html:/var/log/letsencrypt
      - web-root:/var/www/html
    depends_on:
      - nginx
    command: certonly --webroot --webroot-path=/var/www/html --email chubuvkomn@proton.me --agree-tos --no-eff-email --staging -d oo-serv.ru -d www.oo-serv.ru

networks:
  deml:
    driver: bridge
    name : "deml"

volumes:
  projects:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PRG_PATH}
  certbot-etc:
  certbot-var:
  certbot-log:
  web-root:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./html